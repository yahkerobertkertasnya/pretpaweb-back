package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.35

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/yahkerobertkertasnya/preweb/graph/model"
)

// CreateTweet is the resolver for the createTweet field.
func (r *mutationResolver) CreateTweet(ctx context.Context, inputTweet model.NewTweet) (*model.Tweet, error) {
	var user *model.User

	userId := ctx.Value("UserID").(string)

	err := r.DB.First(&user, "id = ?", userId).Error

	if err != nil {
		return nil, err
	}

	tweet := &model.Tweet{
		ID:        uuid.NewString(),
		UserID:    userId,
		User:      user,
		Content:   inputTweet.Content,
		CreatedAt: time.Now(),
	}

	err2 := r.DB.Save(&tweet).Error

	go func() {
		var tweets []*model.Tweet

		for _, channel := range r.channel {
			tweetz := <-channel
			id := tweetz[0].ID

			err = r.DB.Order("created_at desc").Preload("User").Find(&tweets, "user_id = ?", id).Error
			channel <- tweets
		}
	}()

	return tweet, err2
}

// GetUserTweets is the resolver for the getUserTweets field.
func (r *queryResolver) GetUserTweets(ctx context.Context, id string) ([]*model.Tweet, error) {
	var tweets []*model.Tweet

	err := r.DB.Order("created_at desc").Preload("User").Find(&tweets, "user_id = ?", id).Error

	return tweets, err
}

// GetAllTweets is the resolver for the getAllTweets field.
func (r *queryResolver) GetAllTweets(ctx context.Context) ([]*model.Tweet, error) {
	var tweets []*model.Tweet

	return tweets, r.DB.Find(&tweets).Preload("User").Find(&tweets).Error
}

// GetUserTweets is the resolver for the getUserTweets field.
func (r *subscriptionResolver) GetUserTweets(ctx context.Context, id string) (<-chan []*model.Tweet, error) {
	channel := make(chan []*model.Tweet, 1)

	var tweets []*model.Tweet
	var err error

	go func() {
		for {
			time.Sleep(1 * time.Second)
			err = r.DB.Order("created_at desc").Preload("User").Find(&tweets, "user_id = ?", id).Error

			if err != nil {
				continue
			}

			select {
			case <-ctx.Done():
				close(channel)
				return

			case channel <- tweets:
				//test
			}
		}
	}()

	return channel, nil
}

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

type subscriptionResolver struct{ *Resolver }
